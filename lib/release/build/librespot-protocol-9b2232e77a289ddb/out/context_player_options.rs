// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `context_player_options.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:spotify.player.proto.ContextPlayerOptions)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ContextPlayerOptions {
    // message fields
    // @@protoc_insertion_point(field:spotify.player.proto.ContextPlayerOptions.shuffling_context)
    pub shuffling_context: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:spotify.player.proto.ContextPlayerOptions.repeating_context)
    pub repeating_context: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:spotify.player.proto.ContextPlayerOptions.repeating_track)
    pub repeating_track: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:spotify.player.proto.ContextPlayerOptions.playback_speed)
    pub playback_speed: ::std::option::Option<f32>,
    // @@protoc_insertion_point(field:spotify.player.proto.ContextPlayerOptions.modes)
    pub modes: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:spotify.player.proto.ContextPlayerOptions.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ContextPlayerOptions {
    fn default() -> &'a ContextPlayerOptions {
        <ContextPlayerOptions as ::protobuf::Message>::default_instance()
    }
}

impl ContextPlayerOptions {
    pub fn new() -> ContextPlayerOptions {
        ::std::default::Default::default()
    }

    // optional bool shuffling_context = 1;

    pub fn shuffling_context(&self) -> bool {
        self.shuffling_context.unwrap_or(false)
    }

    pub fn clear_shuffling_context(&mut self) {
        self.shuffling_context = ::std::option::Option::None;
    }

    pub fn has_shuffling_context(&self) -> bool {
        self.shuffling_context.is_some()
    }

    // Param is passed by value, moved
    pub fn set_shuffling_context(&mut self, v: bool) {
        self.shuffling_context = ::std::option::Option::Some(v);
    }

    // optional bool repeating_context = 2;

    pub fn repeating_context(&self) -> bool {
        self.repeating_context.unwrap_or(false)
    }

    pub fn clear_repeating_context(&mut self) {
        self.repeating_context = ::std::option::Option::None;
    }

    pub fn has_repeating_context(&self) -> bool {
        self.repeating_context.is_some()
    }

    // Param is passed by value, moved
    pub fn set_repeating_context(&mut self, v: bool) {
        self.repeating_context = ::std::option::Option::Some(v);
    }

    // optional bool repeating_track = 3;

    pub fn repeating_track(&self) -> bool {
        self.repeating_track.unwrap_or(false)
    }

    pub fn clear_repeating_track(&mut self) {
        self.repeating_track = ::std::option::Option::None;
    }

    pub fn has_repeating_track(&self) -> bool {
        self.repeating_track.is_some()
    }

    // Param is passed by value, moved
    pub fn set_repeating_track(&mut self, v: bool) {
        self.repeating_track = ::std::option::Option::Some(v);
    }

    // optional float playback_speed = 4;

    pub fn playback_speed(&self) -> f32 {
        self.playback_speed.unwrap_or(0.)
    }

    pub fn clear_playback_speed(&mut self) {
        self.playback_speed = ::std::option::Option::None;
    }

    pub fn has_playback_speed(&self) -> bool {
        self.playback_speed.is_some()
    }

    // Param is passed by value, moved
    pub fn set_playback_speed(&mut self, v: f32) {
        self.playback_speed = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "shuffling_context",
            |m: &ContextPlayerOptions| { &m.shuffling_context },
            |m: &mut ContextPlayerOptions| { &mut m.shuffling_context },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "repeating_context",
            |m: &ContextPlayerOptions| { &m.repeating_context },
            |m: &mut ContextPlayerOptions| { &mut m.repeating_context },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "repeating_track",
            |m: &ContextPlayerOptions| { &m.repeating_track },
            |m: &mut ContextPlayerOptions| { &mut m.repeating_track },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "playback_speed",
            |m: &ContextPlayerOptions| { &m.playback_speed },
            |m: &mut ContextPlayerOptions| { &mut m.playback_speed },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor_new::<_, _>(
            "modes",
            |m: &ContextPlayerOptions| { &m.modes },
            |m: &mut ContextPlayerOptions| { &mut m.modes },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ContextPlayerOptions>(
            "ContextPlayerOptions",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ContextPlayerOptions {
    const NAME: &'static str = "ContextPlayerOptions";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.shuffling_context = ::std::option::Option::Some(is.read_bool()?);
                },
                16 => {
                    self.repeating_context = ::std::option::Option::Some(is.read_bool()?);
                },
                24 => {
                    self.repeating_track = ::std::option::Option::Some(is.read_bool()?);
                },
                37 => {
                    self.playback_speed = ::std::option::Option::Some(is.read_float()?);
                },
                42 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            18 => value = is.read_string()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.modes.insert(key, value);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.shuffling_context {
            my_size += 1 + 1;
        }
        if let Some(v) = self.repeating_context {
            my_size += 1 + 1;
        }
        if let Some(v) = self.repeating_track {
            my_size += 1 + 1;
        }
        if let Some(v) = self.playback_speed {
            my_size += 1 + 4;
        }
        for (k, v) in &self.modes {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.shuffling_context {
            os.write_bool(1, v)?;
        }
        if let Some(v) = self.repeating_context {
            os.write_bool(2, v)?;
        }
        if let Some(v) = self.repeating_track {
            os.write_bool(3, v)?;
        }
        if let Some(v) = self.playback_speed {
            os.write_float(4, v)?;
        }
        for (k, v) in &self.modes {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            os.write_raw_varint32(42)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            os.write_string(2, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ContextPlayerOptions {
        ContextPlayerOptions::new()
    }

    fn clear(&mut self) {
        self.shuffling_context = ::std::option::Option::None;
        self.repeating_context = ::std::option::Option::None;
        self.repeating_track = ::std::option::Option::None;
        self.playback_speed = ::std::option::Option::None;
        self.modes.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ContextPlayerOptions {
        static instance: ::protobuf::rt::Lazy<ContextPlayerOptions> = ::protobuf::rt::Lazy::new();
        instance.get(ContextPlayerOptions::new)
    }
}

impl ::protobuf::MessageFull for ContextPlayerOptions {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ContextPlayerOptions").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ContextPlayerOptions {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ContextPlayerOptions {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:spotify.player.proto.ContextPlayerOptionOverrides)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ContextPlayerOptionOverrides {
    // message fields
    // @@protoc_insertion_point(field:spotify.player.proto.ContextPlayerOptionOverrides.shuffling_context)
    pub shuffling_context: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:spotify.player.proto.ContextPlayerOptionOverrides.repeating_context)
    pub repeating_context: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:spotify.player.proto.ContextPlayerOptionOverrides.repeating_track)
    pub repeating_track: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:spotify.player.proto.ContextPlayerOptionOverrides.playback_speed)
    pub playback_speed: ::std::option::Option<f32>,
    // @@protoc_insertion_point(field:spotify.player.proto.ContextPlayerOptionOverrides.modes)
    pub modes: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:spotify.player.proto.ContextPlayerOptionOverrides.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ContextPlayerOptionOverrides {
    fn default() -> &'a ContextPlayerOptionOverrides {
        <ContextPlayerOptionOverrides as ::protobuf::Message>::default_instance()
    }
}

impl ContextPlayerOptionOverrides {
    pub fn new() -> ContextPlayerOptionOverrides {
        ::std::default::Default::default()
    }

    // optional bool shuffling_context = 1;

    pub fn shuffling_context(&self) -> bool {
        self.shuffling_context.unwrap_or(false)
    }

    pub fn clear_shuffling_context(&mut self) {
        self.shuffling_context = ::std::option::Option::None;
    }

    pub fn has_shuffling_context(&self) -> bool {
        self.shuffling_context.is_some()
    }

    // Param is passed by value, moved
    pub fn set_shuffling_context(&mut self, v: bool) {
        self.shuffling_context = ::std::option::Option::Some(v);
    }

    // optional bool repeating_context = 2;

    pub fn repeating_context(&self) -> bool {
        self.repeating_context.unwrap_or(false)
    }

    pub fn clear_repeating_context(&mut self) {
        self.repeating_context = ::std::option::Option::None;
    }

    pub fn has_repeating_context(&self) -> bool {
        self.repeating_context.is_some()
    }

    // Param is passed by value, moved
    pub fn set_repeating_context(&mut self, v: bool) {
        self.repeating_context = ::std::option::Option::Some(v);
    }

    // optional bool repeating_track = 3;

    pub fn repeating_track(&self) -> bool {
        self.repeating_track.unwrap_or(false)
    }

    pub fn clear_repeating_track(&mut self) {
        self.repeating_track = ::std::option::Option::None;
    }

    pub fn has_repeating_track(&self) -> bool {
        self.repeating_track.is_some()
    }

    // Param is passed by value, moved
    pub fn set_repeating_track(&mut self, v: bool) {
        self.repeating_track = ::std::option::Option::Some(v);
    }

    // optional float playback_speed = 4;

    pub fn playback_speed(&self) -> f32 {
        self.playback_speed.unwrap_or(0.)
    }

    pub fn clear_playback_speed(&mut self) {
        self.playback_speed = ::std::option::Option::None;
    }

    pub fn has_playback_speed(&self) -> bool {
        self.playback_speed.is_some()
    }

    // Param is passed by value, moved
    pub fn set_playback_speed(&mut self, v: f32) {
        self.playback_speed = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "shuffling_context",
            |m: &ContextPlayerOptionOverrides| { &m.shuffling_context },
            |m: &mut ContextPlayerOptionOverrides| { &mut m.shuffling_context },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "repeating_context",
            |m: &ContextPlayerOptionOverrides| { &m.repeating_context },
            |m: &mut ContextPlayerOptionOverrides| { &mut m.repeating_context },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "repeating_track",
            |m: &ContextPlayerOptionOverrides| { &m.repeating_track },
            |m: &mut ContextPlayerOptionOverrides| { &mut m.repeating_track },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "playback_speed",
            |m: &ContextPlayerOptionOverrides| { &m.playback_speed },
            |m: &mut ContextPlayerOptionOverrides| { &mut m.playback_speed },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor_new::<_, _>(
            "modes",
            |m: &ContextPlayerOptionOverrides| { &m.modes },
            |m: &mut ContextPlayerOptionOverrides| { &mut m.modes },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ContextPlayerOptionOverrides>(
            "ContextPlayerOptionOverrides",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ContextPlayerOptionOverrides {
    const NAME: &'static str = "ContextPlayerOptionOverrides";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.shuffling_context = ::std::option::Option::Some(is.read_bool()?);
                },
                16 => {
                    self.repeating_context = ::std::option::Option::Some(is.read_bool()?);
                },
                24 => {
                    self.repeating_track = ::std::option::Option::Some(is.read_bool()?);
                },
                37 => {
                    self.playback_speed = ::std::option::Option::Some(is.read_float()?);
                },
                42 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            18 => value = is.read_string()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.modes.insert(key, value);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.shuffling_context {
            my_size += 1 + 1;
        }
        if let Some(v) = self.repeating_context {
            my_size += 1 + 1;
        }
        if let Some(v) = self.repeating_track {
            my_size += 1 + 1;
        }
        if let Some(v) = self.playback_speed {
            my_size += 1 + 4;
        }
        for (k, v) in &self.modes {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.shuffling_context {
            os.write_bool(1, v)?;
        }
        if let Some(v) = self.repeating_context {
            os.write_bool(2, v)?;
        }
        if let Some(v) = self.repeating_track {
            os.write_bool(3, v)?;
        }
        if let Some(v) = self.playback_speed {
            os.write_float(4, v)?;
        }
        for (k, v) in &self.modes {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            os.write_raw_varint32(42)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            os.write_string(2, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ContextPlayerOptionOverrides {
        ContextPlayerOptionOverrides::new()
    }

    fn clear(&mut self) {
        self.shuffling_context = ::std::option::Option::None;
        self.repeating_context = ::std::option::Option::None;
        self.repeating_track = ::std::option::Option::None;
        self.playback_speed = ::std::option::Option::None;
        self.modes.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ContextPlayerOptionOverrides {
        static instance: ::protobuf::rt::Lazy<ContextPlayerOptionOverrides> = ::protobuf::rt::Lazy::new();
        instance.get(ContextPlayerOptionOverrides::new)
    }
}

impl ::protobuf::MessageFull for ContextPlayerOptionOverrides {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ContextPlayerOptionOverrides").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ContextPlayerOptionOverrides {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ContextPlayerOptionOverrides {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1ccontext_player_options.proto\x12\x14spotify.player.proto\"\xc7\x02\
    \n\x14ContextPlayerOptions\x12+\n\x11shuffling_context\x18\x01\x20\x01(\
    \x08R\x10shufflingContext\x12+\n\x11repeating_context\x18\x02\x20\x01(\
    \x08R\x10repeatingContext\x12'\n\x0frepeating_track\x18\x03\x20\x01(\x08\
    R\x0erepeatingTrack\x12%\n\x0eplayback_speed\x18\x04\x20\x01(\x02R\rplay\
    backSpeed\x12K\n\x05modes\x18\x05\x20\x03(\x0b25.spotify.player.proto.Co\
    ntextPlayerOptions.ModesEntryR\x05modes\x1a8\n\nModesEntry\x12\x10\n\x03\
    key\x18\x01\x20\x01(\tR\x03key\x12\x14\n\x05value\x18\x02\x20\x01(\tR\
    \x05value:\x028\x01\"\xd7\x02\n\x1cContextPlayerOptionOverrides\x12+\n\
    \x11shuffling_context\x18\x01\x20\x01(\x08R\x10shufflingContext\x12+\n\
    \x11repeating_context\x18\x02\x20\x01(\x08R\x10repeatingContext\x12'\n\
    \x0frepeating_track\x18\x03\x20\x01(\x08R\x0erepeatingTrack\x12%\n\x0epl\
    ayback_speed\x18\x04\x20\x01(\x02R\rplaybackSpeed\x12S\n\x05modes\x18\
    \x05\x20\x03(\x0b2=.spotify.player.proto.ContextPlayerOptionOverrides.Mo\
    desEntryR\x05modes\x1a8\n\nModesEntry\x12\x10\n\x03key\x18\x01\x20\x01(\
    \tR\x03key\x12\x14\n\x05value\x18\x02\x20\x01(\tR\x05value:\x028\x01B\
    \x02H\x02b\x06proto2\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(ContextPlayerOptions::generated_message_descriptor_data());
            messages.push(ContextPlayerOptionOverrides::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}

// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `entity_extension_data.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:spotify.extendedmetadata.EntityExtensionDataHeader)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct EntityExtensionDataHeader {
    // message fields
    // @@protoc_insertion_point(field:spotify.extendedmetadata.EntityExtensionDataHeader.status_code)
    pub status_code: i32,
    // @@protoc_insertion_point(field:spotify.extendedmetadata.EntityExtensionDataHeader.etag)
    pub etag: ::std::string::String,
    // @@protoc_insertion_point(field:spotify.extendedmetadata.EntityExtensionDataHeader.locale)
    pub locale: ::std::string::String,
    // @@protoc_insertion_point(field:spotify.extendedmetadata.EntityExtensionDataHeader.cache_ttl_in_seconds)
    pub cache_ttl_in_seconds: i64,
    // @@protoc_insertion_point(field:spotify.extendedmetadata.EntityExtensionDataHeader.offline_ttl_in_seconds)
    pub offline_ttl_in_seconds: i64,
    // special fields
    // @@protoc_insertion_point(special_field:spotify.extendedmetadata.EntityExtensionDataHeader.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a EntityExtensionDataHeader {
    fn default() -> &'a EntityExtensionDataHeader {
        <EntityExtensionDataHeader as ::protobuf::Message>::default_instance()
    }
}

impl EntityExtensionDataHeader {
    pub fn new() -> EntityExtensionDataHeader {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "status_code",
            |m: &EntityExtensionDataHeader| { &m.status_code },
            |m: &mut EntityExtensionDataHeader| { &mut m.status_code },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "etag",
            |m: &EntityExtensionDataHeader| { &m.etag },
            |m: &mut EntityExtensionDataHeader| { &mut m.etag },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "locale",
            |m: &EntityExtensionDataHeader| { &m.locale },
            |m: &mut EntityExtensionDataHeader| { &mut m.locale },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "cache_ttl_in_seconds",
            |m: &EntityExtensionDataHeader| { &m.cache_ttl_in_seconds },
            |m: &mut EntityExtensionDataHeader| { &mut m.cache_ttl_in_seconds },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "offline_ttl_in_seconds",
            |m: &EntityExtensionDataHeader| { &m.offline_ttl_in_seconds },
            |m: &mut EntityExtensionDataHeader| { &mut m.offline_ttl_in_seconds },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EntityExtensionDataHeader>(
            "EntityExtensionDataHeader",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for EntityExtensionDataHeader {
    const NAME: &'static str = "EntityExtensionDataHeader";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.status_code = is.read_int32()?;
                },
                18 => {
                    self.etag = is.read_string()?;
                },
                26 => {
                    self.locale = is.read_string()?;
                },
                32 => {
                    self.cache_ttl_in_seconds = is.read_int64()?;
                },
                40 => {
                    self.offline_ttl_in_seconds = is.read_int64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.status_code != 0 {
            my_size += ::protobuf::rt::int32_size(1, self.status_code);
        }
        if !self.etag.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.etag);
        }
        if !self.locale.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.locale);
        }
        if self.cache_ttl_in_seconds != 0 {
            my_size += ::protobuf::rt::int64_size(4, self.cache_ttl_in_seconds);
        }
        if self.offline_ttl_in_seconds != 0 {
            my_size += ::protobuf::rt::int64_size(5, self.offline_ttl_in_seconds);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.status_code != 0 {
            os.write_int32(1, self.status_code)?;
        }
        if !self.etag.is_empty() {
            os.write_string(2, &self.etag)?;
        }
        if !self.locale.is_empty() {
            os.write_string(3, &self.locale)?;
        }
        if self.cache_ttl_in_seconds != 0 {
            os.write_int64(4, self.cache_ttl_in_seconds)?;
        }
        if self.offline_ttl_in_seconds != 0 {
            os.write_int64(5, self.offline_ttl_in_seconds)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> EntityExtensionDataHeader {
        EntityExtensionDataHeader::new()
    }

    fn clear(&mut self) {
        self.status_code = 0;
        self.etag.clear();
        self.locale.clear();
        self.cache_ttl_in_seconds = 0;
        self.offline_ttl_in_seconds = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static EntityExtensionDataHeader {
        static instance: EntityExtensionDataHeader = EntityExtensionDataHeader {
            status_code: 0,
            etag: ::std::string::String::new(),
            locale: ::std::string::String::new(),
            cache_ttl_in_seconds: 0,
            offline_ttl_in_seconds: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for EntityExtensionDataHeader {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("EntityExtensionDataHeader").unwrap()).clone()
    }
}

impl ::std::fmt::Display for EntityExtensionDataHeader {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EntityExtensionDataHeader {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:spotify.extendedmetadata.EntityExtensionData)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct EntityExtensionData {
    // message fields
    // @@protoc_insertion_point(field:spotify.extendedmetadata.EntityExtensionData.header)
    pub header: ::protobuf::MessageField<EntityExtensionDataHeader>,
    // @@protoc_insertion_point(field:spotify.extendedmetadata.EntityExtensionData.entity_uri)
    pub entity_uri: ::std::string::String,
    // @@protoc_insertion_point(field:spotify.extendedmetadata.EntityExtensionData.extension_data)
    pub extension_data: ::protobuf::MessageField<::protobuf::well_known_types::any::Any>,
    // special fields
    // @@protoc_insertion_point(special_field:spotify.extendedmetadata.EntityExtensionData.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a EntityExtensionData {
    fn default() -> &'a EntityExtensionData {
        <EntityExtensionData as ::protobuf::Message>::default_instance()
    }
}

impl EntityExtensionData {
    pub fn new() -> EntityExtensionData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, EntityExtensionDataHeader>(
            "header",
            |m: &EntityExtensionData| { &m.header },
            |m: &mut EntityExtensionData| { &mut m.header },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "entity_uri",
            |m: &EntityExtensionData| { &m.entity_uri },
            |m: &mut EntityExtensionData| { &mut m.entity_uri },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::any::Any>(
            "extension_data",
            |m: &EntityExtensionData| { &m.extension_data },
            |m: &mut EntityExtensionData| { &mut m.extension_data },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EntityExtensionData>(
            "EntityExtensionData",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for EntityExtensionData {
    const NAME: &'static str = "EntityExtensionData";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.header)?;
                },
                18 => {
                    self.entity_uri = is.read_string()?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.extension_data)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.entity_uri.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.entity_uri);
        }
        if let Some(v) = self.extension_data.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.header.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if !self.entity_uri.is_empty() {
            os.write_string(2, &self.entity_uri)?;
        }
        if let Some(v) = self.extension_data.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> EntityExtensionData {
        EntityExtensionData::new()
    }

    fn clear(&mut self) {
        self.header.clear();
        self.entity_uri.clear();
        self.extension_data.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static EntityExtensionData {
        static instance: EntityExtensionData = EntityExtensionData {
            header: ::protobuf::MessageField::none(),
            entity_uri: ::std::string::String::new(),
            extension_data: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for EntityExtensionData {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("EntityExtensionData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for EntityExtensionData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EntityExtensionData {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:spotify.extendedmetadata.PlainListAssoc)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct PlainListAssoc {
    // message fields
    // @@protoc_insertion_point(field:spotify.extendedmetadata.PlainListAssoc.entity_uri)
    pub entity_uri: ::std::vec::Vec<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:spotify.extendedmetadata.PlainListAssoc.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PlainListAssoc {
    fn default() -> &'a PlainListAssoc {
        <PlainListAssoc as ::protobuf::Message>::default_instance()
    }
}

impl PlainListAssoc {
    pub fn new() -> PlainListAssoc {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "entity_uri",
            |m: &PlainListAssoc| { &m.entity_uri },
            |m: &mut PlainListAssoc| { &mut m.entity_uri },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PlainListAssoc>(
            "PlainListAssoc",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PlainListAssoc {
    const NAME: &'static str = "PlainListAssoc";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.entity_uri.push(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.entity_uri {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.entity_uri {
            os.write_string(1, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PlainListAssoc {
        PlainListAssoc::new()
    }

    fn clear(&mut self) {
        self.entity_uri.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PlainListAssoc {
        static instance: PlainListAssoc = PlainListAssoc {
            entity_uri: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PlainListAssoc {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PlainListAssoc").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PlainListAssoc {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PlainListAssoc {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:spotify.extendedmetadata.AssocHeader)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct AssocHeader {
    // special fields
    // @@protoc_insertion_point(special_field:spotify.extendedmetadata.AssocHeader.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AssocHeader {
    fn default() -> &'a AssocHeader {
        <AssocHeader as ::protobuf::Message>::default_instance()
    }
}

impl AssocHeader {
    pub fn new() -> AssocHeader {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AssocHeader>(
            "AssocHeader",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for AssocHeader {
    const NAME: &'static str = "AssocHeader";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AssocHeader {
        AssocHeader::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AssocHeader {
        static instance: AssocHeader = AssocHeader {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for AssocHeader {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("AssocHeader").unwrap()).clone()
    }
}

impl ::std::fmt::Display for AssocHeader {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AssocHeader {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:spotify.extendedmetadata.Assoc)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Assoc {
    // message fields
    // @@protoc_insertion_point(field:spotify.extendedmetadata.Assoc.header)
    pub header: ::protobuf::MessageField<AssocHeader>,
    // @@protoc_insertion_point(field:spotify.extendedmetadata.Assoc.plain_list)
    pub plain_list: ::protobuf::MessageField<PlainListAssoc>,
    // special fields
    // @@protoc_insertion_point(special_field:spotify.extendedmetadata.Assoc.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Assoc {
    fn default() -> &'a Assoc {
        <Assoc as ::protobuf::Message>::default_instance()
    }
}

impl Assoc {
    pub fn new() -> Assoc {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, AssocHeader>(
            "header",
            |m: &Assoc| { &m.header },
            |m: &mut Assoc| { &mut m.header },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, PlainListAssoc>(
            "plain_list",
            |m: &Assoc| { &m.plain_list },
            |m: &mut Assoc| { &mut m.plain_list },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Assoc>(
            "Assoc",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Assoc {
    const NAME: &'static str = "Assoc";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.header)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.plain_list)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.plain_list.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.header.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.plain_list.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Assoc {
        Assoc::new()
    }

    fn clear(&mut self) {
        self.header.clear();
        self.plain_list.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Assoc {
        static instance: Assoc = Assoc {
            header: ::protobuf::MessageField::none(),
            plain_list: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Assoc {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Assoc").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Assoc {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Assoc {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1bentity_extension_data.proto\x12\x18spotify.extendedmetadata\x1a\
    \x19google/protobuf/any.proto\"\xce\x01\n\x19EntityExtensionDataHeader\
    \x12\x1f\n\x0bstatus_code\x18\x01\x20\x01(\x05R\nstatusCode\x12\x12\n\
    \x04etag\x18\x02\x20\x01(\tR\x04etag\x12\x16\n\x06locale\x18\x03\x20\x01\
    (\tR\x06locale\x12/\n\x14cache_ttl_in_seconds\x18\x04\x20\x01(\x03R\x11c\
    acheTtlInSeconds\x123\n\x16offline_ttl_in_seconds\x18\x05\x20\x01(\x03R\
    \x13offlineTtlInSeconds\"\xbe\x01\n\x13EntityExtensionData\x12K\n\x06hea\
    der\x18\x01\x20\x01(\x0b23.spotify.extendedmetadata.EntityExtensionDataH\
    eaderR\x06header\x12\x1d\n\nentity_uri\x18\x02\x20\x01(\tR\tentityUri\
    \x12;\n\x0eextension_data\x18\x03\x20\x01(\x0b2\x14.google.protobuf.AnyR\
    \rextensionData\"/\n\x0ePlainListAssoc\x12\x1d\n\nentity_uri\x18\x01\x20\
    \x03(\tR\tentityUri\"\r\n\x0bAssocHeader\"\x8f\x01\n\x05Assoc\x12=\n\x06\
    header\x18\x01\x20\x01(\x0b2%.spotify.extendedmetadata.AssocHeaderR\x06h\
    eader\x12G\n\nplain_list\x18\x02\x20\x01(\x0b2(.spotify.extendedmetadata\
    .PlainListAssocR\tplainListB+\n\"com.spotify.extendedmetadata.protoP\x01\
    H\x02\xf8\x01\x01b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(::protobuf::well_known_types::any::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(5);
            messages.push(EntityExtensionDataHeader::generated_message_descriptor_data());
            messages.push(EntityExtensionData::generated_message_descriptor_data());
            messages.push(PlainListAssoc::generated_message_descriptor_data());
            messages.push(AssocHeader::generated_message_descriptor_data());
            messages.push(Assoc::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}

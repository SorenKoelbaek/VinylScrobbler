// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `autoplay_context_request.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:spotify.player.proto.AutoplayContextRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct AutoplayContextRequest {
    // message fields
    // @@protoc_insertion_point(field:spotify.player.proto.AutoplayContextRequest.context_uri)
    pub context_uri: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:spotify.player.proto.AutoplayContextRequest.recent_track_uri)
    pub recent_track_uri: ::std::vec::Vec<::std::string::String>,
    // @@protoc_insertion_point(field:spotify.player.proto.AutoplayContextRequest.is_video)
    pub is_video: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:spotify.player.proto.AutoplayContextRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AutoplayContextRequest {
    fn default() -> &'a AutoplayContextRequest {
        <AutoplayContextRequest as ::protobuf::Message>::default_instance()
    }
}

impl AutoplayContextRequest {
    pub fn new() -> AutoplayContextRequest {
        ::std::default::Default::default()
    }

    // required string context_uri = 1;

    pub fn context_uri(&self) -> &str {
        match self.context_uri.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_context_uri(&mut self) {
        self.context_uri = ::std::option::Option::None;
    }

    pub fn has_context_uri(&self) -> bool {
        self.context_uri.is_some()
    }

    // Param is passed by value, moved
    pub fn set_context_uri(&mut self, v: ::std::string::String) {
        self.context_uri = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_context_uri(&mut self) -> &mut ::std::string::String {
        if self.context_uri.is_none() {
            self.context_uri = ::std::option::Option::Some(::std::string::String::new());
        }
        self.context_uri.as_mut().unwrap()
    }

    // Take field
    pub fn take_context_uri(&mut self) -> ::std::string::String {
        self.context_uri.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bool is_video = 3;

    pub fn is_video(&self) -> bool {
        self.is_video.unwrap_or(false)
    }

    pub fn clear_is_video(&mut self) {
        self.is_video = ::std::option::Option::None;
    }

    pub fn has_is_video(&self) -> bool {
        self.is_video.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_video(&mut self, v: bool) {
        self.is_video = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "context_uri",
            |m: &AutoplayContextRequest| { &m.context_uri },
            |m: &mut AutoplayContextRequest| { &mut m.context_uri },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "recent_track_uri",
            |m: &AutoplayContextRequest| { &m.recent_track_uri },
            |m: &mut AutoplayContextRequest| { &mut m.recent_track_uri },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "is_video",
            |m: &AutoplayContextRequest| { &m.is_video },
            |m: &mut AutoplayContextRequest| { &mut m.is_video },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AutoplayContextRequest>(
            "AutoplayContextRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for AutoplayContextRequest {
    const NAME: &'static str = "AutoplayContextRequest";

    fn is_initialized(&self) -> bool {
        if self.context_uri.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.context_uri = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.recent_track_uri.push(is.read_string()?);
                },
                24 => {
                    self.is_video = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.context_uri.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        for value in &self.recent_track_uri {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        if let Some(v) = self.is_video {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.context_uri.as_ref() {
            os.write_string(1, v)?;
        }
        for v in &self.recent_track_uri {
            os.write_string(2, &v)?;
        };
        if let Some(v) = self.is_video {
            os.write_bool(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AutoplayContextRequest {
        AutoplayContextRequest::new()
    }

    fn clear(&mut self) {
        self.context_uri = ::std::option::Option::None;
        self.recent_track_uri.clear();
        self.is_video = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AutoplayContextRequest {
        static instance: AutoplayContextRequest = AutoplayContextRequest {
            context_uri: ::std::option::Option::None,
            recent_track_uri: ::std::vec::Vec::new(),
            is_video: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for AutoplayContextRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("AutoplayContextRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for AutoplayContextRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AutoplayContextRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1eautoplay_context_request.proto\x12\x14spotify.player.proto\"~\n\
    \x16AutoplayContextRequest\x12\x1f\n\x0bcontext_uri\x18\x01\x20\x02(\tR\
    \ncontextUri\x12(\n\x10recent_track_uri\x18\x02\x20\x03(\tR\x0erecentTra\
    ckUri\x12\x19\n\x08is_video\x18\x03\x20\x01(\x08R\x07isVideoB\x02H\x02b\
    \x06proto2\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(AutoplayContextRequest::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}

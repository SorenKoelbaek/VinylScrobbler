// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `spotify/login5/v3/credentials/credentials.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:spotify.login5.v3.credentials.StoredCredential)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct StoredCredential {
    // message fields
    // @@protoc_insertion_point(field:spotify.login5.v3.credentials.StoredCredential.username)
    pub username: ::std::string::String,
    // @@protoc_insertion_point(field:spotify.login5.v3.credentials.StoredCredential.data)
    pub data: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:spotify.login5.v3.credentials.StoredCredential.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StoredCredential {
    fn default() -> &'a StoredCredential {
        <StoredCredential as ::protobuf::Message>::default_instance()
    }
}

impl StoredCredential {
    pub fn new() -> StoredCredential {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "username",
            |m: &StoredCredential| { &m.username },
            |m: &mut StoredCredential| { &mut m.username },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "data",
            |m: &StoredCredential| { &m.data },
            |m: &mut StoredCredential| { &mut m.data },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StoredCredential>(
            "StoredCredential",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for StoredCredential {
    const NAME: &'static str = "StoredCredential";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.username = is.read_string()?;
                },
                18 => {
                    self.data = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.username.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.username);
        }
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.data);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.username.is_empty() {
            os.write_string(1, &self.username)?;
        }
        if !self.data.is_empty() {
            os.write_bytes(2, &self.data)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StoredCredential {
        StoredCredential::new()
    }

    fn clear(&mut self) {
        self.username.clear();
        self.data.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StoredCredential {
        static instance: StoredCredential = StoredCredential {
            username: ::std::string::String::new(),
            data: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StoredCredential {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StoredCredential").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StoredCredential {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StoredCredential {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:spotify.login5.v3.credentials.Password)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Password {
    // message fields
    // @@protoc_insertion_point(field:spotify.login5.v3.credentials.Password.id)
    pub id: ::std::string::String,
    // @@protoc_insertion_point(field:spotify.login5.v3.credentials.Password.password)
    pub password: ::std::string::String,
    // @@protoc_insertion_point(field:spotify.login5.v3.credentials.Password.padding)
    pub padding: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:spotify.login5.v3.credentials.Password.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Password {
    fn default() -> &'a Password {
        <Password as ::protobuf::Message>::default_instance()
    }
}

impl Password {
    pub fn new() -> Password {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &Password| { &m.id },
            |m: &mut Password| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "password",
            |m: &Password| { &m.password },
            |m: &mut Password| { &mut m.password },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "padding",
            |m: &Password| { &m.padding },
            |m: &mut Password| { &mut m.padding },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Password>(
            "Password",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Password {
    const NAME: &'static str = "Password";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.id = is.read_string()?;
                },
                18 => {
                    self.password = is.read_string()?;
                },
                26 => {
                    self.padding = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if !self.password.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.password);
        }
        if !self.padding.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.padding);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if !self.password.is_empty() {
            os.write_string(2, &self.password)?;
        }
        if !self.padding.is_empty() {
            os.write_bytes(3, &self.padding)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Password {
        Password::new()
    }

    fn clear(&mut self) {
        self.id.clear();
        self.password.clear();
        self.padding.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Password {
        static instance: Password = Password {
            id: ::std::string::String::new(),
            password: ::std::string::String::new(),
            padding: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Password {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Password").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Password {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Password {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:spotify.login5.v3.credentials.FacebookAccessToken)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct FacebookAccessToken {
    // message fields
    // @@protoc_insertion_point(field:spotify.login5.v3.credentials.FacebookAccessToken.fb_uid)
    pub fb_uid: ::std::string::String,
    // @@protoc_insertion_point(field:spotify.login5.v3.credentials.FacebookAccessToken.access_token)
    pub access_token: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:spotify.login5.v3.credentials.FacebookAccessToken.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a FacebookAccessToken {
    fn default() -> &'a FacebookAccessToken {
        <FacebookAccessToken as ::protobuf::Message>::default_instance()
    }
}

impl FacebookAccessToken {
    pub fn new() -> FacebookAccessToken {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "fb_uid",
            |m: &FacebookAccessToken| { &m.fb_uid },
            |m: &mut FacebookAccessToken| { &mut m.fb_uid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "access_token",
            |m: &FacebookAccessToken| { &m.access_token },
            |m: &mut FacebookAccessToken| { &mut m.access_token },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<FacebookAccessToken>(
            "FacebookAccessToken",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for FacebookAccessToken {
    const NAME: &'static str = "FacebookAccessToken";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.fb_uid = is.read_string()?;
                },
                18 => {
                    self.access_token = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.fb_uid.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.fb_uid);
        }
        if !self.access_token.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.access_token);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.fb_uid.is_empty() {
            os.write_string(1, &self.fb_uid)?;
        }
        if !self.access_token.is_empty() {
            os.write_string(2, &self.access_token)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> FacebookAccessToken {
        FacebookAccessToken::new()
    }

    fn clear(&mut self) {
        self.fb_uid.clear();
        self.access_token.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static FacebookAccessToken {
        static instance: FacebookAccessToken = FacebookAccessToken {
            fb_uid: ::std::string::String::new(),
            access_token: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for FacebookAccessToken {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("FacebookAccessToken").unwrap()).clone()
    }
}

impl ::std::fmt::Display for FacebookAccessToken {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FacebookAccessToken {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:spotify.login5.v3.credentials.OneTimeToken)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct OneTimeToken {
    // message fields
    // @@protoc_insertion_point(field:spotify.login5.v3.credentials.OneTimeToken.token)
    pub token: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:spotify.login5.v3.credentials.OneTimeToken.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a OneTimeToken {
    fn default() -> &'a OneTimeToken {
        <OneTimeToken as ::protobuf::Message>::default_instance()
    }
}

impl OneTimeToken {
    pub fn new() -> OneTimeToken {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "token",
            |m: &OneTimeToken| { &m.token },
            |m: &mut OneTimeToken| { &mut m.token },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<OneTimeToken>(
            "OneTimeToken",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for OneTimeToken {
    const NAME: &'static str = "OneTimeToken";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.token = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.token.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.token);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.token.is_empty() {
            os.write_string(1, &self.token)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> OneTimeToken {
        OneTimeToken::new()
    }

    fn clear(&mut self) {
        self.token.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static OneTimeToken {
        static instance: OneTimeToken = OneTimeToken {
            token: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for OneTimeToken {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("OneTimeToken").unwrap()).clone()
    }
}

impl ::std::fmt::Display for OneTimeToken {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OneTimeToken {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:spotify.login5.v3.credentials.ParentChildCredential)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ParentChildCredential {
    // message fields
    // @@protoc_insertion_point(field:spotify.login5.v3.credentials.ParentChildCredential.child_id)
    pub child_id: ::std::string::String,
    // @@protoc_insertion_point(field:spotify.login5.v3.credentials.ParentChildCredential.parent_stored_credential)
    pub parent_stored_credential: ::protobuf::MessageField<StoredCredential>,
    // special fields
    // @@protoc_insertion_point(special_field:spotify.login5.v3.credentials.ParentChildCredential.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ParentChildCredential {
    fn default() -> &'a ParentChildCredential {
        <ParentChildCredential as ::protobuf::Message>::default_instance()
    }
}

impl ParentChildCredential {
    pub fn new() -> ParentChildCredential {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "child_id",
            |m: &ParentChildCredential| { &m.child_id },
            |m: &mut ParentChildCredential| { &mut m.child_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, StoredCredential>(
            "parent_stored_credential",
            |m: &ParentChildCredential| { &m.parent_stored_credential },
            |m: &mut ParentChildCredential| { &mut m.parent_stored_credential },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ParentChildCredential>(
            "ParentChildCredential",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ParentChildCredential {
    const NAME: &'static str = "ParentChildCredential";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.child_id = is.read_string()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.parent_stored_credential)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.child_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.child_id);
        }
        if let Some(v) = self.parent_stored_credential.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.child_id.is_empty() {
            os.write_string(1, &self.child_id)?;
        }
        if let Some(v) = self.parent_stored_credential.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ParentChildCredential {
        ParentChildCredential::new()
    }

    fn clear(&mut self) {
        self.child_id.clear();
        self.parent_stored_credential.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ParentChildCredential {
        static instance: ParentChildCredential = ParentChildCredential {
            child_id: ::std::string::String::new(),
            parent_stored_credential: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ParentChildCredential {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ParentChildCredential").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ParentChildCredential {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ParentChildCredential {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:spotify.login5.v3.credentials.AppleSignInCredential)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct AppleSignInCredential {
    // message fields
    // @@protoc_insertion_point(field:spotify.login5.v3.credentials.AppleSignInCredential.auth_code)
    pub auth_code: ::std::string::String,
    // @@protoc_insertion_point(field:spotify.login5.v3.credentials.AppleSignInCredential.redirect_uri)
    pub redirect_uri: ::std::string::String,
    // @@protoc_insertion_point(field:spotify.login5.v3.credentials.AppleSignInCredential.bundle_id)
    pub bundle_id: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:spotify.login5.v3.credentials.AppleSignInCredential.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AppleSignInCredential {
    fn default() -> &'a AppleSignInCredential {
        <AppleSignInCredential as ::protobuf::Message>::default_instance()
    }
}

impl AppleSignInCredential {
    pub fn new() -> AppleSignInCredential {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "auth_code",
            |m: &AppleSignInCredential| { &m.auth_code },
            |m: &mut AppleSignInCredential| { &mut m.auth_code },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "redirect_uri",
            |m: &AppleSignInCredential| { &m.redirect_uri },
            |m: &mut AppleSignInCredential| { &mut m.redirect_uri },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "bundle_id",
            |m: &AppleSignInCredential| { &m.bundle_id },
            |m: &mut AppleSignInCredential| { &mut m.bundle_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AppleSignInCredential>(
            "AppleSignInCredential",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for AppleSignInCredential {
    const NAME: &'static str = "AppleSignInCredential";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.auth_code = is.read_string()?;
                },
                18 => {
                    self.redirect_uri = is.read_string()?;
                },
                26 => {
                    self.bundle_id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.auth_code.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.auth_code);
        }
        if !self.redirect_uri.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.redirect_uri);
        }
        if !self.bundle_id.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.bundle_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.auth_code.is_empty() {
            os.write_string(1, &self.auth_code)?;
        }
        if !self.redirect_uri.is_empty() {
            os.write_string(2, &self.redirect_uri)?;
        }
        if !self.bundle_id.is_empty() {
            os.write_string(3, &self.bundle_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AppleSignInCredential {
        AppleSignInCredential::new()
    }

    fn clear(&mut self) {
        self.auth_code.clear();
        self.redirect_uri.clear();
        self.bundle_id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AppleSignInCredential {
        static instance: AppleSignInCredential = AppleSignInCredential {
            auth_code: ::std::string::String::new(),
            redirect_uri: ::std::string::String::new(),
            bundle_id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for AppleSignInCredential {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("AppleSignInCredential").unwrap()).clone()
    }
}

impl ::std::fmt::Display for AppleSignInCredential {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AppleSignInCredential {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:spotify.login5.v3.credentials.SamsungSignInCredential)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct SamsungSignInCredential {
    // message fields
    // @@protoc_insertion_point(field:spotify.login5.v3.credentials.SamsungSignInCredential.auth_code)
    pub auth_code: ::std::string::String,
    // @@protoc_insertion_point(field:spotify.login5.v3.credentials.SamsungSignInCredential.redirect_uri)
    pub redirect_uri: ::std::string::String,
    // @@protoc_insertion_point(field:spotify.login5.v3.credentials.SamsungSignInCredential.id_token)
    pub id_token: ::std::string::String,
    // @@protoc_insertion_point(field:spotify.login5.v3.credentials.SamsungSignInCredential.token_endpoint_url)
    pub token_endpoint_url: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:spotify.login5.v3.credentials.SamsungSignInCredential.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SamsungSignInCredential {
    fn default() -> &'a SamsungSignInCredential {
        <SamsungSignInCredential as ::protobuf::Message>::default_instance()
    }
}

impl SamsungSignInCredential {
    pub fn new() -> SamsungSignInCredential {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "auth_code",
            |m: &SamsungSignInCredential| { &m.auth_code },
            |m: &mut SamsungSignInCredential| { &mut m.auth_code },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "redirect_uri",
            |m: &SamsungSignInCredential| { &m.redirect_uri },
            |m: &mut SamsungSignInCredential| { &mut m.redirect_uri },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id_token",
            |m: &SamsungSignInCredential| { &m.id_token },
            |m: &mut SamsungSignInCredential| { &mut m.id_token },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "token_endpoint_url",
            |m: &SamsungSignInCredential| { &m.token_endpoint_url },
            |m: &mut SamsungSignInCredential| { &mut m.token_endpoint_url },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SamsungSignInCredential>(
            "SamsungSignInCredential",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SamsungSignInCredential {
    const NAME: &'static str = "SamsungSignInCredential";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.auth_code = is.read_string()?;
                },
                18 => {
                    self.redirect_uri = is.read_string()?;
                },
                26 => {
                    self.id_token = is.read_string()?;
                },
                34 => {
                    self.token_endpoint_url = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.auth_code.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.auth_code);
        }
        if !self.redirect_uri.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.redirect_uri);
        }
        if !self.id_token.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.id_token);
        }
        if !self.token_endpoint_url.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.token_endpoint_url);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.auth_code.is_empty() {
            os.write_string(1, &self.auth_code)?;
        }
        if !self.redirect_uri.is_empty() {
            os.write_string(2, &self.redirect_uri)?;
        }
        if !self.id_token.is_empty() {
            os.write_string(3, &self.id_token)?;
        }
        if !self.token_endpoint_url.is_empty() {
            os.write_string(4, &self.token_endpoint_url)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SamsungSignInCredential {
        SamsungSignInCredential::new()
    }

    fn clear(&mut self) {
        self.auth_code.clear();
        self.redirect_uri.clear();
        self.id_token.clear();
        self.token_endpoint_url.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SamsungSignInCredential {
        static instance: SamsungSignInCredential = SamsungSignInCredential {
            auth_code: ::std::string::String::new(),
            redirect_uri: ::std::string::String::new(),
            id_token: ::std::string::String::new(),
            token_endpoint_url: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SamsungSignInCredential {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SamsungSignInCredential").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SamsungSignInCredential {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SamsungSignInCredential {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:spotify.login5.v3.credentials.GoogleSignInCredential)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GoogleSignInCredential {
    // message fields
    // @@protoc_insertion_point(field:spotify.login5.v3.credentials.GoogleSignInCredential.auth_code)
    pub auth_code: ::std::string::String,
    // @@protoc_insertion_point(field:spotify.login5.v3.credentials.GoogleSignInCredential.redirect_uri)
    pub redirect_uri: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:spotify.login5.v3.credentials.GoogleSignInCredential.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GoogleSignInCredential {
    fn default() -> &'a GoogleSignInCredential {
        <GoogleSignInCredential as ::protobuf::Message>::default_instance()
    }
}

impl GoogleSignInCredential {
    pub fn new() -> GoogleSignInCredential {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "auth_code",
            |m: &GoogleSignInCredential| { &m.auth_code },
            |m: &mut GoogleSignInCredential| { &mut m.auth_code },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "redirect_uri",
            |m: &GoogleSignInCredential| { &m.redirect_uri },
            |m: &mut GoogleSignInCredential| { &mut m.redirect_uri },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GoogleSignInCredential>(
            "GoogleSignInCredential",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GoogleSignInCredential {
    const NAME: &'static str = "GoogleSignInCredential";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.auth_code = is.read_string()?;
                },
                18 => {
                    self.redirect_uri = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.auth_code.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.auth_code);
        }
        if !self.redirect_uri.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.redirect_uri);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.auth_code.is_empty() {
            os.write_string(1, &self.auth_code)?;
        }
        if !self.redirect_uri.is_empty() {
            os.write_string(2, &self.redirect_uri)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GoogleSignInCredential {
        GoogleSignInCredential::new()
    }

    fn clear(&mut self) {
        self.auth_code.clear();
        self.redirect_uri.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GoogleSignInCredential {
        static instance: GoogleSignInCredential = GoogleSignInCredential {
            auth_code: ::std::string::String::new(),
            redirect_uri: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GoogleSignInCredential {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GoogleSignInCredential").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GoogleSignInCredential {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GoogleSignInCredential {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n/spotify/login5/v3/credentials/credentials.proto\x12\x1dspotify.login5\
    .v3.credentials\"B\n\x10StoredCredential\x12\x1a\n\x08username\x18\x01\
    \x20\x01(\tR\x08username\x12\x12\n\x04data\x18\x02\x20\x01(\x0cR\x04data\
    \"P\n\x08Password\x12\x0e\n\x02id\x18\x01\x20\x01(\tR\x02id\x12\x1a\n\
    \x08password\x18\x02\x20\x01(\tR\x08password\x12\x18\n\x07padding\x18\
    \x03\x20\x01(\x0cR\x07padding\"O\n\x13FacebookAccessToken\x12\x15\n\x06f\
    b_uid\x18\x01\x20\x01(\tR\x05fbUid\x12!\n\x0caccess_token\x18\x02\x20\
    \x01(\tR\x0baccessToken\"$\n\x0cOneTimeToken\x12\x14\n\x05token\x18\x01\
    \x20\x01(\tR\x05token\"\x9d\x01\n\x15ParentChildCredential\x12\x19\n\x08\
    child_id\x18\x01\x20\x01(\tR\x07childId\x12i\n\x18parent_stored_credenti\
    al\x18\x02\x20\x01(\x0b2/.spotify.login5.v3.credentials.StoredCredential\
    R\x16parentStoredCredential\"t\n\x15AppleSignInCredential\x12\x1b\n\taut\
    h_code\x18\x01\x20\x01(\tR\x08authCode\x12!\n\x0credirect_uri\x18\x02\
    \x20\x01(\tR\x0bredirectUri\x12\x1b\n\tbundle_id\x18\x03\x20\x01(\tR\x08\
    bundleId\"\xa2\x01\n\x17SamsungSignInCredential\x12\x1b\n\tauth_code\x18\
    \x01\x20\x01(\tR\x08authCode\x12!\n\x0credirect_uri\x18\x02\x20\x01(\tR\
    \x0bredirectUri\x12\x19\n\x08id_token\x18\x03\x20\x01(\tR\x07idToken\x12\
    ,\n\x12token_endpoint_url\x18\x04\x20\x01(\tR\x10tokenEndpointUrl\"X\n\
    \x16GoogleSignInCredential\x12\x1b\n\tauth_code\x18\x01\x20\x01(\tR\x08a\
    uthCode\x12!\n\x0credirect_uri\x18\x02\x20\x01(\tR\x0bredirectUriB9\n'co\
    m.spotify.login5.v3.credentials.protoP\x01H\x02\xa2\x02\tSPTLogin5b\x06p\
    roto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(8);
            messages.push(StoredCredential::generated_message_descriptor_data());
            messages.push(Password::generated_message_descriptor_data());
            messages.push(FacebookAccessToken::generated_message_descriptor_data());
            messages.push(OneTimeToken::generated_message_descriptor_data());
            messages.push(ParentChildCredential::generated_message_descriptor_data());
            messages.push(AppleSignInCredential::generated_message_descriptor_data());
            messages.push(SamsungSignInCredential::generated_message_descriptor_data());
            messages.push(GoogleSignInCredential::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}

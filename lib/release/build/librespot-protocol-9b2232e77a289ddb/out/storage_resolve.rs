// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `storage-resolve.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:spotify.download.proto.StorageResolveResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct StorageResolveResponse {
    // message fields
    // @@protoc_insertion_point(field:spotify.download.proto.StorageResolveResponse.result)
    pub result: ::protobuf::EnumOrUnknown<storage_resolve_response::Result>,
    // @@protoc_insertion_point(field:spotify.download.proto.StorageResolveResponse.cdnurl)
    pub cdnurl: ::std::vec::Vec<::std::string::String>,
    // @@protoc_insertion_point(field:spotify.download.proto.StorageResolveResponse.fileid)
    pub fileid: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:spotify.download.proto.StorageResolveResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StorageResolveResponse {
    fn default() -> &'a StorageResolveResponse {
        <StorageResolveResponse as ::protobuf::Message>::default_instance()
    }
}

impl StorageResolveResponse {
    pub fn new() -> StorageResolveResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "result",
            |m: &StorageResolveResponse| { &m.result },
            |m: &mut StorageResolveResponse| { &mut m.result },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "cdnurl",
            |m: &StorageResolveResponse| { &m.cdnurl },
            |m: &mut StorageResolveResponse| { &mut m.cdnurl },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "fileid",
            |m: &StorageResolveResponse| { &m.fileid },
            |m: &mut StorageResolveResponse| { &mut m.fileid },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StorageResolveResponse>(
            "StorageResolveResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for StorageResolveResponse {
    const NAME: &'static str = "StorageResolveResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.result = is.read_enum_or_unknown()?;
                },
                18 => {
                    self.cdnurl.push(is.read_string()?);
                },
                34 => {
                    self.fileid = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.result != ::protobuf::EnumOrUnknown::new(storage_resolve_response::Result::CDN) {
            my_size += ::protobuf::rt::int32_size(1, self.result.value());
        }
        for value in &self.cdnurl {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        if !self.fileid.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.fileid);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.result != ::protobuf::EnumOrUnknown::new(storage_resolve_response::Result::CDN) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.result))?;
        }
        for v in &self.cdnurl {
            os.write_string(2, &v)?;
        };
        if !self.fileid.is_empty() {
            os.write_bytes(4, &self.fileid)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StorageResolveResponse {
        StorageResolveResponse::new()
    }

    fn clear(&mut self) {
        self.result = ::protobuf::EnumOrUnknown::new(storage_resolve_response::Result::CDN);
        self.cdnurl.clear();
        self.fileid.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StorageResolveResponse {
        static instance: StorageResolveResponse = StorageResolveResponse {
            result: ::protobuf::EnumOrUnknown::from_i32(0),
            cdnurl: ::std::vec::Vec::new(),
            fileid: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StorageResolveResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StorageResolveResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StorageResolveResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StorageResolveResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `StorageResolveResponse`
pub mod storage_resolve_response {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:spotify.download.proto.StorageResolveResponse.Result)
    pub enum Result {
        // @@protoc_insertion_point(enum_value:spotify.download.proto.StorageResolveResponse.Result.CDN)
        CDN = 0,
        // @@protoc_insertion_point(enum_value:spotify.download.proto.StorageResolveResponse.Result.STORAGE)
        STORAGE = 1,
        // @@protoc_insertion_point(enum_value:spotify.download.proto.StorageResolveResponse.Result.RESTRICTED)
        RESTRICTED = 3,
    }

    impl ::protobuf::Enum for Result {
        const NAME: &'static str = "Result";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<Result> {
            match value {
                0 => ::std::option::Option::Some(Result::CDN),
                1 => ::std::option::Option::Some(Result::STORAGE),
                3 => ::std::option::Option::Some(Result::RESTRICTED),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<Result> {
            match str {
                "CDN" => ::std::option::Option::Some(Result::CDN),
                "STORAGE" => ::std::option::Option::Some(Result::STORAGE),
                "RESTRICTED" => ::std::option::Option::Some(Result::RESTRICTED),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [Result] = &[
            Result::CDN,
            Result::STORAGE,
            Result::RESTRICTED,
        ];
    }

    impl ::protobuf::EnumFull for Result {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("StorageResolveResponse.Result").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = match self {
                Result::CDN => 0,
                Result::STORAGE => 1,
                Result::RESTRICTED => 2,
            };
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for Result {
        fn default() -> Self {
            Result::CDN
        }
    }

    impl Result {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Result>("StorageResolveResponse.Result")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x15storage-resolve.proto\x12\x16spotify.download.proto\"\xc7\x01\n\
    \x16StorageResolveResponse\x12M\n\x06result\x18\x01\x20\x01(\x0e25.spoti\
    fy.download.proto.StorageResolveResponse.ResultR\x06result\x12\x16\n\x06\
    cdnurl\x18\x02\x20\x03(\tR\x06cdnurl\x12\x16\n\x06fileid\x18\x04\x20\x01\
    (\x0cR\x06fileid\".\n\x06Result\x12\x07\n\x03CDN\x10\0\x12\x0b\n\x07STOR\
    AGE\x10\x01\x12\x0e\n\nRESTRICTED\x10\x03B\x02H\x02b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(StorageResolveResponse::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(storage_resolve_response::Result::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}

// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `context_page.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:spotify.player.proto.ContextPage)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ContextPage {
    // message fields
    // @@protoc_insertion_point(field:spotify.player.proto.ContextPage.page_url)
    pub page_url: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:spotify.player.proto.ContextPage.next_page_url)
    pub next_page_url: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:spotify.player.proto.ContextPage.metadata)
    pub metadata: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    // @@protoc_insertion_point(field:spotify.player.proto.ContextPage.tracks)
    pub tracks: ::std::vec::Vec<super::context_track::ContextTrack>,
    // @@protoc_insertion_point(field:spotify.player.proto.ContextPage.loading)
    pub loading: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:spotify.player.proto.ContextPage.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ContextPage {
    fn default() -> &'a ContextPage {
        <ContextPage as ::protobuf::Message>::default_instance()
    }
}

impl ContextPage {
    pub fn new() -> ContextPage {
        ::std::default::Default::default()
    }

    // optional string page_url = 1;

    pub fn page_url(&self) -> &str {
        match self.page_url.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_page_url(&mut self) {
        self.page_url = ::std::option::Option::None;
    }

    pub fn has_page_url(&self) -> bool {
        self.page_url.is_some()
    }

    // Param is passed by value, moved
    pub fn set_page_url(&mut self, v: ::std::string::String) {
        self.page_url = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_page_url(&mut self) -> &mut ::std::string::String {
        if self.page_url.is_none() {
            self.page_url = ::std::option::Option::Some(::std::string::String::new());
        }
        self.page_url.as_mut().unwrap()
    }

    // Take field
    pub fn take_page_url(&mut self) -> ::std::string::String {
        self.page_url.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string next_page_url = 2;

    pub fn next_page_url(&self) -> &str {
        match self.next_page_url.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_next_page_url(&mut self) {
        self.next_page_url = ::std::option::Option::None;
    }

    pub fn has_next_page_url(&self) -> bool {
        self.next_page_url.is_some()
    }

    // Param is passed by value, moved
    pub fn set_next_page_url(&mut self, v: ::std::string::String) {
        self.next_page_url = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_next_page_url(&mut self) -> &mut ::std::string::String {
        if self.next_page_url.is_none() {
            self.next_page_url = ::std::option::Option::Some(::std::string::String::new());
        }
        self.next_page_url.as_mut().unwrap()
    }

    // Take field
    pub fn take_next_page_url(&mut self) -> ::std::string::String {
        self.next_page_url.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bool loading = 5;

    pub fn loading(&self) -> bool {
        self.loading.unwrap_or(false)
    }

    pub fn clear_loading(&mut self) {
        self.loading = ::std::option::Option::None;
    }

    pub fn has_loading(&self) -> bool {
        self.loading.is_some()
    }

    // Param is passed by value, moved
    pub fn set_loading(&mut self, v: bool) {
        self.loading = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "page_url",
            |m: &ContextPage| { &m.page_url },
            |m: &mut ContextPage| { &mut m.page_url },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "next_page_url",
            |m: &ContextPage| { &m.next_page_url },
            |m: &mut ContextPage| { &mut m.next_page_url },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor_new::<_, _>(
            "metadata",
            |m: &ContextPage| { &m.metadata },
            |m: &mut ContextPage| { &mut m.metadata },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "tracks",
            |m: &ContextPage| { &m.tracks },
            |m: &mut ContextPage| { &mut m.tracks },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "loading",
            |m: &ContextPage| { &m.loading },
            |m: &mut ContextPage| { &mut m.loading },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ContextPage>(
            "ContextPage",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ContextPage {
    const NAME: &'static str = "ContextPage";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.page_url = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.next_page_url = ::std::option::Option::Some(is.read_string()?);
                },
                26 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            18 => value = is.read_string()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.metadata.insert(key, value);
                },
                34 => {
                    self.tracks.push(is.read_message()?);
                },
                40 => {
                    self.loading = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.page_url.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.next_page_url.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        for (k, v) in &self.metadata {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        for value in &self.tracks {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.loading {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.page_url.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.next_page_url.as_ref() {
            os.write_string(2, v)?;
        }
        for (k, v) in &self.metadata {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            os.write_raw_varint32(26)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            os.write_string(2, &v)?;
        };
        for v in &self.tracks {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        if let Some(v) = self.loading {
            os.write_bool(5, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ContextPage {
        ContextPage::new()
    }

    fn clear(&mut self) {
        self.page_url = ::std::option::Option::None;
        self.next_page_url = ::std::option::Option::None;
        self.metadata.clear();
        self.tracks.clear();
        self.loading = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ContextPage {
        static instance: ::protobuf::rt::Lazy<ContextPage> = ::protobuf::rt::Lazy::new();
        instance.get(ContextPage::new)
    }
}

impl ::protobuf::MessageFull for ContextPage {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ContextPage").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ContextPage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ContextPage {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x12context_page.proto\x12\x14spotify.player.proto\x1a\x13context_trac\
    k.proto\"\xac\x02\n\x0bContextPage\x12\x19\n\x08page_url\x18\x01\x20\x01\
    (\tR\x07pageUrl\x12\"\n\rnext_page_url\x18\x02\x20\x01(\tR\x0bnextPageUr\
    l\x12K\n\x08metadata\x18\x03\x20\x03(\x0b2/.spotify.player.proto.Context\
    Page.MetadataEntryR\x08metadata\x12:\n\x06tracks\x18\x04\x20\x03(\x0b2\"\
    .spotify.player.proto.ContextTrackR\x06tracks\x12\x18\n\x07loading\x18\
    \x05\x20\x01(\x08R\x07loading\x1a;\n\rMetadataEntry\x12\x10\n\x03key\x18\
    \x01\x20\x01(\tR\x03key\x12\x14\n\x05value\x18\x02\x20\x01(\tR\x05value:\
    \x028\x01B\x02H\x02b\x06proto2\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::context_track::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(ContextPage::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}

// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `extended_metadata.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:spotify.extendedmetadata.ExtensionQuery)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ExtensionQuery {
    // message fields
    // @@protoc_insertion_point(field:spotify.extendedmetadata.ExtensionQuery.extension_kind)
    pub extension_kind: ::protobuf::EnumOrUnknown<super::extension_kind::ExtensionKind>,
    // @@protoc_insertion_point(field:spotify.extendedmetadata.ExtensionQuery.etag)
    pub etag: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:spotify.extendedmetadata.ExtensionQuery.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ExtensionQuery {
    fn default() -> &'a ExtensionQuery {
        <ExtensionQuery as ::protobuf::Message>::default_instance()
    }
}

impl ExtensionQuery {
    pub fn new() -> ExtensionQuery {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "extension_kind",
            |m: &ExtensionQuery| { &m.extension_kind },
            |m: &mut ExtensionQuery| { &mut m.extension_kind },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "etag",
            |m: &ExtensionQuery| { &m.etag },
            |m: &mut ExtensionQuery| { &mut m.etag },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ExtensionQuery>(
            "ExtensionQuery",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ExtensionQuery {
    const NAME: &'static str = "ExtensionQuery";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.extension_kind = is.read_enum_or_unknown()?;
                },
                18 => {
                    self.etag = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.extension_kind != ::protobuf::EnumOrUnknown::new(super::extension_kind::ExtensionKind::UNKNOWN_EXTENSION) {
            my_size += ::protobuf::rt::int32_size(1, self.extension_kind.value());
        }
        if !self.etag.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.etag);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.extension_kind != ::protobuf::EnumOrUnknown::new(super::extension_kind::ExtensionKind::UNKNOWN_EXTENSION) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.extension_kind))?;
        }
        if !self.etag.is_empty() {
            os.write_string(2, &self.etag)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ExtensionQuery {
        ExtensionQuery::new()
    }

    fn clear(&mut self) {
        self.extension_kind = ::protobuf::EnumOrUnknown::new(super::extension_kind::ExtensionKind::UNKNOWN_EXTENSION);
        self.etag.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ExtensionQuery {
        static instance: ExtensionQuery = ExtensionQuery {
            extension_kind: ::protobuf::EnumOrUnknown::from_i32(0),
            etag: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ExtensionQuery {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ExtensionQuery").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ExtensionQuery {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ExtensionQuery {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:spotify.extendedmetadata.EntityRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct EntityRequest {
    // message fields
    // @@protoc_insertion_point(field:spotify.extendedmetadata.EntityRequest.entity_uri)
    pub entity_uri: ::std::string::String,
    // @@protoc_insertion_point(field:spotify.extendedmetadata.EntityRequest.query)
    pub query: ::std::vec::Vec<ExtensionQuery>,
    // special fields
    // @@protoc_insertion_point(special_field:spotify.extendedmetadata.EntityRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a EntityRequest {
    fn default() -> &'a EntityRequest {
        <EntityRequest as ::protobuf::Message>::default_instance()
    }
}

impl EntityRequest {
    pub fn new() -> EntityRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "entity_uri",
            |m: &EntityRequest| { &m.entity_uri },
            |m: &mut EntityRequest| { &mut m.entity_uri },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "query",
            |m: &EntityRequest| { &m.query },
            |m: &mut EntityRequest| { &mut m.query },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EntityRequest>(
            "EntityRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for EntityRequest {
    const NAME: &'static str = "EntityRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.entity_uri = is.read_string()?;
                },
                18 => {
                    self.query.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.entity_uri.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.entity_uri);
        }
        for value in &self.query {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.entity_uri.is_empty() {
            os.write_string(1, &self.entity_uri)?;
        }
        for v in &self.query {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> EntityRequest {
        EntityRequest::new()
    }

    fn clear(&mut self) {
        self.entity_uri.clear();
        self.query.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static EntityRequest {
        static instance: EntityRequest = EntityRequest {
            entity_uri: ::std::string::String::new(),
            query: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for EntityRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("EntityRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for EntityRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EntityRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:spotify.extendedmetadata.BatchedEntityRequestHeader)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct BatchedEntityRequestHeader {
    // message fields
    // @@protoc_insertion_point(field:spotify.extendedmetadata.BatchedEntityRequestHeader.country)
    pub country: ::std::string::String,
    // @@protoc_insertion_point(field:spotify.extendedmetadata.BatchedEntityRequestHeader.catalogue)
    pub catalogue: ::std::string::String,
    // @@protoc_insertion_point(field:spotify.extendedmetadata.BatchedEntityRequestHeader.task_id)
    pub task_id: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:spotify.extendedmetadata.BatchedEntityRequestHeader.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a BatchedEntityRequestHeader {
    fn default() -> &'a BatchedEntityRequestHeader {
        <BatchedEntityRequestHeader as ::protobuf::Message>::default_instance()
    }
}

impl BatchedEntityRequestHeader {
    pub fn new() -> BatchedEntityRequestHeader {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "country",
            |m: &BatchedEntityRequestHeader| { &m.country },
            |m: &mut BatchedEntityRequestHeader| { &mut m.country },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "catalogue",
            |m: &BatchedEntityRequestHeader| { &m.catalogue },
            |m: &mut BatchedEntityRequestHeader| { &mut m.catalogue },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "task_id",
            |m: &BatchedEntityRequestHeader| { &m.task_id },
            |m: &mut BatchedEntityRequestHeader| { &mut m.task_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<BatchedEntityRequestHeader>(
            "BatchedEntityRequestHeader",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for BatchedEntityRequestHeader {
    const NAME: &'static str = "BatchedEntityRequestHeader";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.country = is.read_string()?;
                },
                18 => {
                    self.catalogue = is.read_string()?;
                },
                26 => {
                    self.task_id = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.country.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.country);
        }
        if !self.catalogue.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.catalogue);
        }
        if !self.task_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.task_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.country.is_empty() {
            os.write_string(1, &self.country)?;
        }
        if !self.catalogue.is_empty() {
            os.write_string(2, &self.catalogue)?;
        }
        if !self.task_id.is_empty() {
            os.write_bytes(3, &self.task_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> BatchedEntityRequestHeader {
        BatchedEntityRequestHeader::new()
    }

    fn clear(&mut self) {
        self.country.clear();
        self.catalogue.clear();
        self.task_id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static BatchedEntityRequestHeader {
        static instance: BatchedEntityRequestHeader = BatchedEntityRequestHeader {
            country: ::std::string::String::new(),
            catalogue: ::std::string::String::new(),
            task_id: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for BatchedEntityRequestHeader {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("BatchedEntityRequestHeader").unwrap()).clone()
    }
}

impl ::std::fmt::Display for BatchedEntityRequestHeader {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BatchedEntityRequestHeader {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:spotify.extendedmetadata.BatchedEntityRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct BatchedEntityRequest {
    // message fields
    // @@protoc_insertion_point(field:spotify.extendedmetadata.BatchedEntityRequest.header)
    pub header: ::protobuf::MessageField<BatchedEntityRequestHeader>,
    // @@protoc_insertion_point(field:spotify.extendedmetadata.BatchedEntityRequest.entity_request)
    pub entity_request: ::std::vec::Vec<EntityRequest>,
    // special fields
    // @@protoc_insertion_point(special_field:spotify.extendedmetadata.BatchedEntityRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a BatchedEntityRequest {
    fn default() -> &'a BatchedEntityRequest {
        <BatchedEntityRequest as ::protobuf::Message>::default_instance()
    }
}

impl BatchedEntityRequest {
    pub fn new() -> BatchedEntityRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, BatchedEntityRequestHeader>(
            "header",
            |m: &BatchedEntityRequest| { &m.header },
            |m: &mut BatchedEntityRequest| { &mut m.header },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "entity_request",
            |m: &BatchedEntityRequest| { &m.entity_request },
            |m: &mut BatchedEntityRequest| { &mut m.entity_request },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<BatchedEntityRequest>(
            "BatchedEntityRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for BatchedEntityRequest {
    const NAME: &'static str = "BatchedEntityRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.header)?;
                },
                18 => {
                    self.entity_request.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.entity_request {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.header.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        for v in &self.entity_request {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> BatchedEntityRequest {
        BatchedEntityRequest::new()
    }

    fn clear(&mut self) {
        self.header.clear();
        self.entity_request.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static BatchedEntityRequest {
        static instance: BatchedEntityRequest = BatchedEntityRequest {
            header: ::protobuf::MessageField::none(),
            entity_request: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for BatchedEntityRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("BatchedEntityRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for BatchedEntityRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BatchedEntityRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:spotify.extendedmetadata.EntityExtensionDataArrayHeader)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct EntityExtensionDataArrayHeader {
    // message fields
    // @@protoc_insertion_point(field:spotify.extendedmetadata.EntityExtensionDataArrayHeader.provider_error_status)
    pub provider_error_status: i32,
    // @@protoc_insertion_point(field:spotify.extendedmetadata.EntityExtensionDataArrayHeader.cache_ttl_in_seconds)
    pub cache_ttl_in_seconds: i64,
    // @@protoc_insertion_point(field:spotify.extendedmetadata.EntityExtensionDataArrayHeader.offline_ttl_in_seconds)
    pub offline_ttl_in_seconds: i64,
    // @@protoc_insertion_point(field:spotify.extendedmetadata.EntityExtensionDataArrayHeader.extension_type)
    pub extension_type: ::protobuf::EnumOrUnknown<ExtensionType>,
    // special fields
    // @@protoc_insertion_point(special_field:spotify.extendedmetadata.EntityExtensionDataArrayHeader.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a EntityExtensionDataArrayHeader {
    fn default() -> &'a EntityExtensionDataArrayHeader {
        <EntityExtensionDataArrayHeader as ::protobuf::Message>::default_instance()
    }
}

impl EntityExtensionDataArrayHeader {
    pub fn new() -> EntityExtensionDataArrayHeader {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "provider_error_status",
            |m: &EntityExtensionDataArrayHeader| { &m.provider_error_status },
            |m: &mut EntityExtensionDataArrayHeader| { &mut m.provider_error_status },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "cache_ttl_in_seconds",
            |m: &EntityExtensionDataArrayHeader| { &m.cache_ttl_in_seconds },
            |m: &mut EntityExtensionDataArrayHeader| { &mut m.cache_ttl_in_seconds },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "offline_ttl_in_seconds",
            |m: &EntityExtensionDataArrayHeader| { &m.offline_ttl_in_seconds },
            |m: &mut EntityExtensionDataArrayHeader| { &mut m.offline_ttl_in_seconds },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "extension_type",
            |m: &EntityExtensionDataArrayHeader| { &m.extension_type },
            |m: &mut EntityExtensionDataArrayHeader| { &mut m.extension_type },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EntityExtensionDataArrayHeader>(
            "EntityExtensionDataArrayHeader",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for EntityExtensionDataArrayHeader {
    const NAME: &'static str = "EntityExtensionDataArrayHeader";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.provider_error_status = is.read_int32()?;
                },
                16 => {
                    self.cache_ttl_in_seconds = is.read_int64()?;
                },
                24 => {
                    self.offline_ttl_in_seconds = is.read_int64()?;
                },
                32 => {
                    self.extension_type = is.read_enum_or_unknown()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.provider_error_status != 0 {
            my_size += ::protobuf::rt::int32_size(1, self.provider_error_status);
        }
        if self.cache_ttl_in_seconds != 0 {
            my_size += ::protobuf::rt::int64_size(2, self.cache_ttl_in_seconds);
        }
        if self.offline_ttl_in_seconds != 0 {
            my_size += ::protobuf::rt::int64_size(3, self.offline_ttl_in_seconds);
        }
        if self.extension_type != ::protobuf::EnumOrUnknown::new(ExtensionType::UNKNOWN) {
            my_size += ::protobuf::rt::int32_size(4, self.extension_type.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.provider_error_status != 0 {
            os.write_int32(1, self.provider_error_status)?;
        }
        if self.cache_ttl_in_seconds != 0 {
            os.write_int64(2, self.cache_ttl_in_seconds)?;
        }
        if self.offline_ttl_in_seconds != 0 {
            os.write_int64(3, self.offline_ttl_in_seconds)?;
        }
        if self.extension_type != ::protobuf::EnumOrUnknown::new(ExtensionType::UNKNOWN) {
            os.write_enum(4, ::protobuf::EnumOrUnknown::value(&self.extension_type))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> EntityExtensionDataArrayHeader {
        EntityExtensionDataArrayHeader::new()
    }

    fn clear(&mut self) {
        self.provider_error_status = 0;
        self.cache_ttl_in_seconds = 0;
        self.offline_ttl_in_seconds = 0;
        self.extension_type = ::protobuf::EnumOrUnknown::new(ExtensionType::UNKNOWN);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static EntityExtensionDataArrayHeader {
        static instance: EntityExtensionDataArrayHeader = EntityExtensionDataArrayHeader {
            provider_error_status: 0,
            cache_ttl_in_seconds: 0,
            offline_ttl_in_seconds: 0,
            extension_type: ::protobuf::EnumOrUnknown::from_i32(0),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for EntityExtensionDataArrayHeader {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("EntityExtensionDataArrayHeader").unwrap()).clone()
    }
}

impl ::std::fmt::Display for EntityExtensionDataArrayHeader {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EntityExtensionDataArrayHeader {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:spotify.extendedmetadata.EntityExtensionDataArray)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct EntityExtensionDataArray {
    // message fields
    // @@protoc_insertion_point(field:spotify.extendedmetadata.EntityExtensionDataArray.header)
    pub header: ::protobuf::MessageField<EntityExtensionDataArrayHeader>,
    // @@protoc_insertion_point(field:spotify.extendedmetadata.EntityExtensionDataArray.extension_kind)
    pub extension_kind: ::protobuf::EnumOrUnknown<super::extension_kind::ExtensionKind>,
    // @@protoc_insertion_point(field:spotify.extendedmetadata.EntityExtensionDataArray.extension_data)
    pub extension_data: ::std::vec::Vec<super::entity_extension_data::EntityExtensionData>,
    // special fields
    // @@protoc_insertion_point(special_field:spotify.extendedmetadata.EntityExtensionDataArray.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a EntityExtensionDataArray {
    fn default() -> &'a EntityExtensionDataArray {
        <EntityExtensionDataArray as ::protobuf::Message>::default_instance()
    }
}

impl EntityExtensionDataArray {
    pub fn new() -> EntityExtensionDataArray {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, EntityExtensionDataArrayHeader>(
            "header",
            |m: &EntityExtensionDataArray| { &m.header },
            |m: &mut EntityExtensionDataArray| { &mut m.header },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "extension_kind",
            |m: &EntityExtensionDataArray| { &m.extension_kind },
            |m: &mut EntityExtensionDataArray| { &mut m.extension_kind },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "extension_data",
            |m: &EntityExtensionDataArray| { &m.extension_data },
            |m: &mut EntityExtensionDataArray| { &mut m.extension_data },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EntityExtensionDataArray>(
            "EntityExtensionDataArray",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for EntityExtensionDataArray {
    const NAME: &'static str = "EntityExtensionDataArray";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.header)?;
                },
                16 => {
                    self.extension_kind = is.read_enum_or_unknown()?;
                },
                26 => {
                    self.extension_data.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.extension_kind != ::protobuf::EnumOrUnknown::new(super::extension_kind::ExtensionKind::UNKNOWN_EXTENSION) {
            my_size += ::protobuf::rt::int32_size(2, self.extension_kind.value());
        }
        for value in &self.extension_data {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.header.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if self.extension_kind != ::protobuf::EnumOrUnknown::new(super::extension_kind::ExtensionKind::UNKNOWN_EXTENSION) {
            os.write_enum(2, ::protobuf::EnumOrUnknown::value(&self.extension_kind))?;
        }
        for v in &self.extension_data {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> EntityExtensionDataArray {
        EntityExtensionDataArray::new()
    }

    fn clear(&mut self) {
        self.header.clear();
        self.extension_kind = ::protobuf::EnumOrUnknown::new(super::extension_kind::ExtensionKind::UNKNOWN_EXTENSION);
        self.extension_data.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static EntityExtensionDataArray {
        static instance: EntityExtensionDataArray = EntityExtensionDataArray {
            header: ::protobuf::MessageField::none(),
            extension_kind: ::protobuf::EnumOrUnknown::from_i32(0),
            extension_data: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for EntityExtensionDataArray {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("EntityExtensionDataArray").unwrap()).clone()
    }
}

impl ::std::fmt::Display for EntityExtensionDataArray {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EntityExtensionDataArray {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:spotify.extendedmetadata.BatchedExtensionResponseHeader)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct BatchedExtensionResponseHeader {
    // special fields
    // @@protoc_insertion_point(special_field:spotify.extendedmetadata.BatchedExtensionResponseHeader.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a BatchedExtensionResponseHeader {
    fn default() -> &'a BatchedExtensionResponseHeader {
        <BatchedExtensionResponseHeader as ::protobuf::Message>::default_instance()
    }
}

impl BatchedExtensionResponseHeader {
    pub fn new() -> BatchedExtensionResponseHeader {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<BatchedExtensionResponseHeader>(
            "BatchedExtensionResponseHeader",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for BatchedExtensionResponseHeader {
    const NAME: &'static str = "BatchedExtensionResponseHeader";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> BatchedExtensionResponseHeader {
        BatchedExtensionResponseHeader::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static BatchedExtensionResponseHeader {
        static instance: BatchedExtensionResponseHeader = BatchedExtensionResponseHeader {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for BatchedExtensionResponseHeader {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("BatchedExtensionResponseHeader").unwrap()).clone()
    }
}

impl ::std::fmt::Display for BatchedExtensionResponseHeader {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BatchedExtensionResponseHeader {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:spotify.extendedmetadata.BatchedExtensionResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct BatchedExtensionResponse {
    // message fields
    // @@protoc_insertion_point(field:spotify.extendedmetadata.BatchedExtensionResponse.header)
    pub header: ::protobuf::MessageField<BatchedExtensionResponseHeader>,
    // @@protoc_insertion_point(field:spotify.extendedmetadata.BatchedExtensionResponse.extended_metadata)
    pub extended_metadata: ::std::vec::Vec<EntityExtensionDataArray>,
    // special fields
    // @@protoc_insertion_point(special_field:spotify.extendedmetadata.BatchedExtensionResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a BatchedExtensionResponse {
    fn default() -> &'a BatchedExtensionResponse {
        <BatchedExtensionResponse as ::protobuf::Message>::default_instance()
    }
}

impl BatchedExtensionResponse {
    pub fn new() -> BatchedExtensionResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, BatchedExtensionResponseHeader>(
            "header",
            |m: &BatchedExtensionResponse| { &m.header },
            |m: &mut BatchedExtensionResponse| { &mut m.header },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "extended_metadata",
            |m: &BatchedExtensionResponse| { &m.extended_metadata },
            |m: &mut BatchedExtensionResponse| { &mut m.extended_metadata },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<BatchedExtensionResponse>(
            "BatchedExtensionResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for BatchedExtensionResponse {
    const NAME: &'static str = "BatchedExtensionResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.header)?;
                },
                18 => {
                    self.extended_metadata.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.extended_metadata {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.header.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        for v in &self.extended_metadata {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> BatchedExtensionResponse {
        BatchedExtensionResponse::new()
    }

    fn clear(&mut self) {
        self.header.clear();
        self.extended_metadata.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static BatchedExtensionResponse {
        static instance: BatchedExtensionResponse = BatchedExtensionResponse {
            header: ::protobuf::MessageField::none(),
            extended_metadata: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for BatchedExtensionResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("BatchedExtensionResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for BatchedExtensionResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BatchedExtensionResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:spotify.extendedmetadata.ExtensionType)
pub enum ExtensionType {
    // @@protoc_insertion_point(enum_value:spotify.extendedmetadata.ExtensionType.UNKNOWN)
    UNKNOWN = 0,
    // @@protoc_insertion_point(enum_value:spotify.extendedmetadata.ExtensionType.GENERIC)
    GENERIC = 1,
    // @@protoc_insertion_point(enum_value:spotify.extendedmetadata.ExtensionType.ASSOC)
    ASSOC = 2,
}

impl ::protobuf::Enum for ExtensionType {
    const NAME: &'static str = "ExtensionType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ExtensionType> {
        match value {
            0 => ::std::option::Option::Some(ExtensionType::UNKNOWN),
            1 => ::std::option::Option::Some(ExtensionType::GENERIC),
            2 => ::std::option::Option::Some(ExtensionType::ASSOC),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<ExtensionType> {
        match str {
            "UNKNOWN" => ::std::option::Option::Some(ExtensionType::UNKNOWN),
            "GENERIC" => ::std::option::Option::Some(ExtensionType::GENERIC),
            "ASSOC" => ::std::option::Option::Some(ExtensionType::ASSOC),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [ExtensionType] = &[
        ExtensionType::UNKNOWN,
        ExtensionType::GENERIC,
        ExtensionType::ASSOC,
    ];
}

impl ::protobuf::EnumFull for ExtensionType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("ExtensionType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for ExtensionType {
    fn default() -> Self {
        ExtensionType::UNKNOWN
    }
}

impl ExtensionType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<ExtensionType>("ExtensionType")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x17extended_metadata.proto\x12\x18spotify.extendedmetadata\x1a\x14ext\
    ension_kind.proto\x1a\x1bentity_extension_data.proto\"t\n\x0eExtensionQu\
    ery\x12N\n\x0eextension_kind\x18\x01\x20\x01(\x0e2'.spotify.extendedmeta\
    data.ExtensionKindR\rextensionKind\x12\x12\n\x04etag\x18\x02\x20\x01(\tR\
    \x04etag\"n\n\rEntityRequest\x12\x1d\n\nentity_uri\x18\x01\x20\x01(\tR\t\
    entityUri\x12>\n\x05query\x18\x02\x20\x03(\x0b2(.spotify.extendedmetadat\
    a.ExtensionQueryR\x05query\"m\n\x1aBatchedEntityRequestHeader\x12\x18\n\
    \x07country\x18\x01\x20\x01(\tR\x07country\x12\x1c\n\tcatalogue\x18\x02\
    \x20\x01(\tR\tcatalogue\x12\x17\n\x07task_id\x18\x03\x20\x01(\x0cR\x06ta\
    skId\"\xb4\x01\n\x14BatchedEntityRequest\x12L\n\x06header\x18\x01\x20\
    \x01(\x0b24.spotify.extendedmetadata.BatchedEntityRequestHeaderR\x06head\
    er\x12N\n\x0eentity_request\x18\x02\x20\x03(\x0b2'.spotify.extendedmetad\
    ata.EntityRequestR\rentityRequest\"\x8a\x02\n\x1eEntityExtensionDataArra\
    yHeader\x122\n\x15provider_error_status\x18\x01\x20\x01(\x05R\x13provide\
    rErrorStatus\x12/\n\x14cache_ttl_in_seconds\x18\x02\x20\x01(\x03R\x11cac\
    heTtlInSeconds\x123\n\x16offline_ttl_in_seconds\x18\x03\x20\x01(\x03R\
    \x13offlineTtlInSeconds\x12N\n\x0eextension_type\x18\x04\x20\x01(\x0e2'.\
    spotify.extendedmetadata.ExtensionTypeR\rextensionType\"\x92\x02\n\x18En\
    tityExtensionDataArray\x12P\n\x06header\x18\x01\x20\x01(\x0b28.spotify.e\
    xtendedmetadata.EntityExtensionDataArrayHeaderR\x06header\x12N\n\x0eexte\
    nsion_kind\x18\x02\x20\x01(\x0e2'.spotify.extendedmetadata.ExtensionKind\
    R\rextensionKind\x12T\n\x0eextension_data\x18\x03\x20\x03(\x0b2-.spotify\
    .extendedmetadata.EntityExtensionDataR\rextensionData\"\x20\n\x1eBatched\
    ExtensionResponseHeader\"\xcd\x01\n\x18BatchedExtensionResponse\x12P\n\
    \x06header\x18\x01\x20\x01(\x0b28.spotify.extendedmetadata.BatchedExtens\
    ionResponseHeaderR\x06header\x12_\n\x11extended_metadata\x18\x02\x20\x03\
    (\x0b22.spotify.extendedmetadata.EntityExtensionDataArrayR\x10extendedMe\
    tadata*4\n\rExtensionType\x12\x0b\n\x07UNKNOWN\x10\0\x12\x0b\n\x07GENERI\
    C\x10\x01\x12\t\n\x05ASSOC\x10\x02B+\n\"com.spotify.extendedmetadata.pro\
    toP\x01H\x02\xf8\x01\x01b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::extension_kind::file_descriptor().clone());
            deps.push(super::entity_extension_data::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(8);
            messages.push(ExtensionQuery::generated_message_descriptor_data());
            messages.push(EntityRequest::generated_message_descriptor_data());
            messages.push(BatchedEntityRequestHeader::generated_message_descriptor_data());
            messages.push(BatchedEntityRequest::generated_message_descriptor_data());
            messages.push(EntityExtensionDataArrayHeader::generated_message_descriptor_data());
            messages.push(EntityExtensionDataArray::generated_message_descriptor_data());
            messages.push(BatchedExtensionResponseHeader::generated_message_descriptor_data());
            messages.push(BatchedExtensionResponse::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(ExtensionType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
